---
title: "Lab 1"
author: "Michelle D. Mohr"
format: 
  html: 
    code-fold: true
    toc: true
execute: 
  echo: true
  message: false
  warning: false
editor: visual
---

```{r setup}
#install.packages("tidyverse")
#install.packages("here")
#install.packages("sf")
#install.packages("tmap")
library(tidyverse) 
library(here)
library(sf)
library(tmap)

```

```{r load data}
sfo_trees_df <- read_csv(here('data', 'sfo_trees', 'sfo_trees.csv')) %>% 
  janitor::clean_names()
```

# Part 1: data exploration and wrangling review

## Example 1:

Find counts of observations by 'legal_status', then select the statuses with the five highest tree counts.

### Pseudocode

grouping by legal status each observation into its own variable column, so counts are seperate summarize by tree count

```{r}
sfo_trees_df %>% 
  group_by(legal_status) %>% 
  summarize(tree_count = n())

top_5_status <- sfo_trees_df %>% 
  filter(!is.na(legal_status)) %>% 
  group_by(legal_status) %>% 
  summarize(tree_count = n()) %>% 
  ungroup() %>% 
  slice_max(tree_count, n=5)
```

Make a ggplot of the top 5 observations from above:

```{r}
ggplot(data=top_5_status,
       aes(y = fct_reorder(legal_status, -tree_count),
           x = tree_count)) +
  geom_col() +
  labs(x = "Legal Status", y = "Tree Count") +
  ggtitle("Top 5 Status")
  theme_minimal() 
  
```

## Example 2

Only keep observations where legal status is "permitted Site: and caretaker is "MTA" or "DPW". Store as "permitted_mta_dpw

### Pseudocode

first create a new data frame, then you want to select only rows in the legal status column that are "permitted site" (using the filter) then from the permitted site observations, you only want to select from the observations MTA or DPW from the column "caretaker" 

### Functional code

```{r}
permitted_mta_dpw <- sfo_trees_df %>% 
  filter(legal_status == 'Permitted Site' & caretaker %in% c('MTA', 'DPW')) 
```

## Example 3

Only keep observations of oak and pine trees
then only keep columns "species", "legal_status", "plant_date", and "latitude" and "longitude" 
For each tree, note whether it's an oak or a pine! 

### Pseudocode

Filter oak and pine trees, but the species are complicate! find by a search string?
select columns as needed
mutate a new column for oak vs pine 

### Functional code

```{r}
oak_pine_df <- sfo_trees_df %>% 
  filter(str_detect(species, "Oak") | str_detect(species, "Pine")) %>% 
  select(species, legal_status, plant_date, latitude, longitude) %>% 
  mutate(type = ifelse(str_detect(species, "Oak"), 'oak', 'pine'))
```

```{r}
ggplot(data = oak_pine_df, aes(x=longitude, y=latitude, color = type)) +
  geom_point()+
  theme_minimal()+
  theme(axis.title = element_blank()) +
  labs(color= "Tree type",
       caption = "Location of oaks and pines in San Francisco") 
```

## Example 4

load a list of CA native species 

```{r}
ca_native_df <- read_csv(here('data/sfo_trees/ca_native_spp.csv'))
```


How can we compare the CA native species to those in our SF trees database? Add a column noting whether a tree is native or not. We'll need the common and scientific names separated! 

```{r}
sfo_trees_native <- sfo_trees_df %>% 
  separate(species, into = c('spp_sci', 'spp_common'), sep = ' :: ') %>% 
  select(starts_with('spp'), 'plant_date', 'legal_status', 'longitude', 'latitude') %>% 
  mutate(ca_native = (spp_sci %in% ca_native_df$scientific_name))

sfo_native_status <- sfo_trees_native %>% 
  group_by(legal_status, ca_native) %>% 
  summarize(n_trees = n(),
            n_species = n_distinct(spp_sci))
```




